using DataClasses.DataLayerClasses;
using Dapper;
using Microsoft.Data.Sqlite;

namespace DataAccessLayer
{
    public class DatabaseManager
    {
        private string connectionString = "Data Source=myDatabase.db";

        public DatabaseManager()
        {
            InitializeDatabase();
        }

        private void InitializeDatabase()
        {
            using (var connection = new SqliteConnection(connectionString))
            {
                connection.Open();

                // Create table if they don't exist
                var sql = @"
                        CREATE TABLE IF NOT EXISTS CodingSessions (
                            Id INTEGER PRIMARY KEY,
                            StartDate TEXT NOT NULL,
                            EndDate TEXT,
                            AllTime TEXT NOT NULL
                        );";

                connection.Execute(sql);
            }
        }

        public bool AddCodingSession(CodingSessionEntity entity)
        {
            try
            {
                using (var connection = new SqliteConnection(connectionString))
                {
                    connection.Open();

                    string sql = @"
                        INSERT INTO CodingSessions (StartDate, EndDate, AllTime)
                        VALUES (@StartDate, @EndDate, @AllTime);
                        SELECT last_insert_rowid();";

                    int newId = connection.ExecuteScalar<int>(sql, entity);
                    entity.Id = newId;  // Update the ID with the one generated by the database

                    return true;
                }
            }
            catch (Exception ex)
            {
                return false;
            }
        }

        public List<CodingSessionEntity> GetAllCodingSession()
        {
            using (var connection = new SqliteConnection(connectionString))
            {
                connection.Open();

                string sql = "SELECT Id, StartDate, EndDate, AllTime FROM CodingSessions";

                return connection.Query<CodingSessionEntity>(sql).ToList();
            }
        }
        public CodingSessionEntity ToCodingSessionEntity(DataClasses.BLLClasses.CodingSessionDto dto)
        {
            return new CodingSessionEntity
            {
                Id = dto.Id,
                StartDate = dto.StartDate,
                EndDate = dto.EndDate,
                AllTime = dto.AllTime
            };
        }
    }
}