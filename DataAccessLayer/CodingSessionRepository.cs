using BusinessLogicLayer.DataClasses;
using BusinessLogicLayer.Interfaces;
using Dapper;
using Microsoft.Data.Sqlite;

namespace DataAccessLayer;

public class CodingSessionRepository : ICodingSessionRepository
{
    private string? connectionString;

    public CodingSessionRepository(string? connectionString)
    {
        this.connectionString = connectionString;

        InitializeDatabase();
    }

    private void InitializeDatabase()
    {
        using var connection = new SqliteConnection(connectionString);
        connection.Open();

        // Create table if they don't exist
        var sql = @"
                        CREATE TABLE IF NOT EXISTS CodingSessions (
                            Id INTEGER PRIMARY KEY,
                            StartDate TEXT NOT NULL,
                            EndDate TEXT,
                            Duration TEXT NOT NULL
                        );";

        connection.Execute(sql);
    }

    public bool AddCodingSession(CodingSession session)
    {
        try
        {
            using var connection = new SqliteConnection(connectionString);
            connection.Open();

            string sql = @"
                        INSERT INTO CodingSessions (StartDate, EndDate, Duration)
                        VALUES (@StartDate, @EndDate, @Duration);
                        SELECT last_insert_rowid();";

            int newId = connection.ExecuteScalar<int>(sql, session);
            session.Id = newId;  // Update the ID with the one generated by the database

            return true;
        }
        catch (Exception)
        {
            return false;
        }
    }

    public List<CodingSession> GetAllCodingSessions()
    {
        using var connection = new SqliteConnection(connectionString);
        connection.Open();

        string sql = "SELECT Id, StartDate, EndDate, Duration FROM CodingSessions";

        return connection.Query<CodingSession>(sql).ToList();
    }

    public bool UpdateCodingSession(CodingSession session)
    {
        try
        {
            using var connection = new SqliteConnection(connectionString);
            connection.Open();

            string sql = @"
                            UPDATE CodingSessions
                            SET StartDate = @StartDate,
                                EndDate = @EndDate,
                                Duration = @Duration
                            WHERE Id = @Id";

            int rowsAffected = connection.Execute(sql, session);

            return rowsAffected > 0;
        } catch (Exception) { return false; }
    }

    public bool DeleteCodingSession(int? id)
    {
        try
        {
            using var connection = new SqliteConnection(connectionString);
            connection.Open();

            string sql = "DELETE FROM CodingSessions WHERE Id = @Id";

            int rowsAffected = connection.Execute(sql, new { Id = id });

            return rowsAffected > 0;
        } catch (Exception) { return false; }
    }
}